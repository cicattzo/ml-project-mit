influence.boost = summary(gbm.model.2)
print("The top 10 variables that play the main roles are:")
print(influence.boost[1:10,1])
baseline <- mean(ames.train$SalePrice)
R2 <- function(base, pred, truth){
OS.SSE = sum((pred - truth)^2)
OS.SST = sum((base-truth)^2)
OS.R2 = 1 - OS.SSE/OS.SST
return(OS.R2)
}
gbm.model.1 <- gbm(SalePrice~.,data=ames.train,
distribution = "gaussian",
n.trees=1000,
interaction.depth=1,
shrinkage=0.1,
n.minobsinnode=10)
pred.1 <- predict(gbm.model.1, newdata=ames.test,n.trees=1000)
gbm.model.2 <- gbm(SalePrice~.,data=ames.train,
distribution = "gaussian",
n.trees=100,
interaction.depth=5,
shrinkage=0.1,
n.minobsinnode=10)
pred.2 <- predict(gbm.model.2, newdata=ames.test,n.trees=100)
gbm.model.3 <- gbm(SalePrice~.,data=ames.train,
distribution = "gaussian",
n.trees=1000,
interaction.depth=1,
shrinkage=0.05,
n.minobsinnode=10)
pred.3 <- predict(gbm.model.3, newdata=ames.test,n.trees=1000)
R2(baseline, pred.1, ames.test$SalePrice)
R2(baseline, pred.2, ames.test$SalePrice)
R2(baseline, pred.3, ames.test$SalePrice)
influence.boost = summary(gbm.model.2)
print("The top 10 variables that play the main roles are:")
print(influence.boost[1:10,1])
baseline <- mean(ames.train$SalePrice)
R2 <- function(base, pred, truth){
OS.SSE = sum((pred - truth)^2)
OS.SST = sum((base-truth)^2)
OS.R2 = 1 - OS.SSE/OS.SST
return(OS.R2)
}
gbm.model.1 <- gbm(SalePrice~.,data=ames.train,
distribution = "gaussian",
n.trees=1000,
interaction.depth=1,
shrinkage=0.1,
n.minobsinnode=10)
pred.1 <- predict(gbm.model.1, newdata=ames.test,n.trees=1000)
gbm.model.2 <- gbm(SalePrice~.,data=ames.train,
distribution = "gaussian",
n.trees=100,
interaction.depth=5,
shrinkage=0.1,
n.minobsinnode=10)
pred.2 <- predict(gbm.model.2, newdata=ames.test,n.trees=100)
gbm.model.3 <- gbm(SalePrice~.,data=ames.train,
distribution = "gaussian",
n.trees=1000,
interaction.depth=1,
shrinkage=1.5,
n.minobsinnode=10)
pred.3 <- predict(gbm.model.3, newdata=ames.test,n.trees=1000)
R2(baseline, pred.1, ames.test$SalePrice)
R2(baseline, pred.2, ames.test$SalePrice)
R2(baseline, pred.3, ames.test$SalePrice)
influence.boost = summary(gbm.model.2)
print("The top 10 variables that play the main roles are:")
print(influence.boost[1:10,1])
print("The top 10 variables that play the main roles are:")
influence.boost[1:10,1]
print(R2(baseline, pred.1, ames.test$SalePrice))
print(R2(baseline, pred.2, ames.test$SalePrice))
print(R2(baseline, pred.3, ames.test$SalePrice))
influence.boost = summary(gbm.model.2)
print("The top 10 variables that play the main roles are:")
influence.boost[1:10,1]
print(R2(baseline, pred.1, ames.test$SalePrice))
print(R2(baseline, pred.2, ames.test$SalePrice))
print(R2(baseline, pred.3, ames.test$SalePrice))
influence.boost = summary(gbm.model.2)
influence.boost[1:10,1]
print(R2(baseline, pred.1, ames.test$SalePrice))
print(R2(baseline, pred.2, ames.test$SalePrice))
print(R2(baseline, pred.3, ames.test$SalePrice))
influence.boost = summary(gbm.model.2)
influence.boost[1:10,1]
pred.1.in <- predict(cart1, newdata=ames.train)
pred.2.in <- predict(train.rf.oob, newdata=ames.train)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyr)
library(ggplot2)
library(corrplot)
library(caret)
library(rpart)
library(rpart.plot)
library(randomForest)
library(gbm)
ames = read.csv("ames.csv")
ames$SalePrice = as.numeric(ames$SalePrice)
factor_indices <- unlist(lapply(ames, is.character))
ames[,factor_indices] <- lapply(ames[,factor_indices],as.factor)
nums <- unlist(lapply(ames, is.numeric))
ames[,nums] %>%
cor() %>%
round(2) %>%
corrplot(method="color", tl.cex = 0.5)
ggplot(data = ames)+geom_point(aes(x = GrLivArea, y = SalePrice, color=factor(SaleType)))
ggplot(data = ames)+geom_point(aes(x = GarageArea, y =SalePrice, color=factor(GarageType)))
set.seed(657)
split = createDataPartition(ames$SalePrice, p = 0.65, list = FALSE)
ames.train = ames[split,]
ames.test = ames[-split,]
cpVals <- data.frame(.cp = seq(0, .0005, by=.00001))
cpCV = train(SalePrice~.,data=ames.train, method="rpart",
trControl=trainControl(method="cv",number=10),
tuneGrid=cpVals, metric="Rsquared", maximize=TRUE)
ggplot(cpCV$results, aes(x=factor(cp), y=Rsquared)) +
geom_col() +
theme_bw() +
ylim(0,1) +
xlab("cp parameter") +
ylab("Cross-validated R2") +
theme(axis.title=element_text(size=24), axis.text=element_text(size=20))
best.cp <- cpCV$bestTune
cart1 = rpart(SalePrice~.,
data = ames.train, cp=best.cp)
prp(cart1,digits = 3, varlen = 0, faclen = 0, tweak = 2)
train.rf.oob <- train(x = ames.train %>% select(-SalePrice),
y = ames.train$SalePrice,
method="rf",
ntree=80,
nodesize=25,
tuneGrid=data.frame(mtry=1:25),
trControl=trainControl(method="oob"))
ggplot(train.rf.oob$results, aes(x=mtry, y=Rsquared)) +
geom_point(size=5) +
theme_bw() +
xlab("Number of variables per split") +
ylab("Out-of-bag R^2") +
scale_x_continuous(breaks=1:25, name="mtry") +
theme(axis.title=element_text(size=18), axis.text=element_text(size=18))
baseline <- mean(ames.train$SalePrice)
R2 <- function(base, pred, truth){
OS.SSE = sum((pred - truth)^2)
OS.SST = sum((base-truth)^2)
OS.R2 = 1 - OS.SSE/OS.SST
return(OS.R2)
}
gbm.model.1 <- gbm(SalePrice~.,data=ames.train,
distribution = "gaussian",
n.trees=1000,
interaction.depth=1,
shrinkage=0.1,
n.minobsinnode=10)
pred.1 <- predict(gbm.model.1, newdata=ames.test,n.trees=1000)
gbm.model.2 <- gbm(SalePrice~.,data=ames.train,
distribution = "gaussian",
n.trees=100,
interaction.depth=5,
shrinkage=0.1,
n.minobsinnode=10)
pred.2 <- predict(gbm.model.2, newdata=ames.test,n.trees=100)
gbm.model.3 <- gbm(SalePrice~.,data=ames.train,
distribution = "gaussian",
n.trees=1000,
interaction.depth=1,
shrinkage=1.5,
n.minobsinnode=10)
pred.3 <- predict(gbm.model.3, newdata=ames.test,n.trees=1000)
print(R2(baseline, pred.1, ames.test$SalePrice))
print(R2(baseline, pred.2, ames.test$SalePrice))
print(R2(baseline, pred.3, ames.test$SalePrice))
influence.boost = summary(gbm.model.2)
influence.boost[1:10,1]
pred.1.in <- predict(cart1, newdata=ames.train)
pred.2.in <- predict(train.rf.oob, newdata=ames.train)
pred.3.in <- predict(gbm.model.1, newdata=ames.train,n.trees=1000)
pred.4.in <- predict(gbm.model.2, newdata=ames.train,n.trees=100)
pred.5.in <- predict(gbm.model.3, newdata=ames.train,n.trees=1000)
pred.1.out <- predict(cart1, newdata=ames.test)
pred.2.out <- predict(train.rf.oob, newdata=ames.test)
pred.3.out <- predict(gbm.model.1, newdata=ames.test,n.trees=1000)
pred.4.out <- predict(gbm.model.2, newdata=ames.test,n.trees=100)
pred.5.out <- predict(gbm.model.3, newdata=ames.test,n.trees=1000)
performance.metrics<-function(pred.in, pred.out, baseline, truth.in, truth.out){
in.R2 <- R2(baseline, pred.in, truth.in)
in.MAE <- mean(abs(pred.in-truth.in))
in.RMSE <- mean(sqrt((pred.in-truth.in)^2))
out.R2 <- R2(baseline, pred.out, truth.out)
out.MAE <- mean(abs(pred.out-truth.out))
out.RMSE <- mean(sqrt((pred.out-truth.out)^2))
return(c(in.R2, in.MAE, in.RMSE, out.R2, out.MAE, out.RMSE))
}
performance.metrics(pred.1.in, pred.1.out, baseline, ames.train$SalePrice, ames.test$SalePrice)
performance.metrics(pred.2.in, pred.2.out, baseline, ames.train$SalePrice, ames.test$SalePrice)
performance.metrics(pred.3.in, pred.3.out, baseline, ames.train$SalePrice, ames.test$SalePrice)
performance.metrics(pred.4.in, pred.4.out, baseline, ames.train$SalePrice, ames.test$SalePrice)
performance.metrics(pred.5.in, pred.5.out, baseline, ames.train$SalePrice, ames.test$SalePrice)
pred.1.in <- predict(cart1, newdata=ames.train)
pred.2.in <- predict(train.rf.oob, newdata=ames.train)
pred.3.in <- predict(gbm.model.1, newdata=ames.train,n.trees=1000)
pred.4.in <- predict(gbm.model.2, newdata=ames.train,n.trees=100)
pred.5.in <- predict(gbm.model.3, newdata=ames.train,n.trees=1000)
pred.1.out <- predict(cart1, newdata=ames.test)
pred.2.out <- predict(train.rf.oob, newdata=ames.test)
pred.3.out <- predict(gbm.model.1, newdata=ames.test,n.trees=1000)
pred.4.out <- predict(gbm.model.2, newdata=ames.test,n.trees=100)
pred.5.out <- predict(gbm.model.3, newdata=ames.test,n.trees=1000)
performance.metrics<-function(pred.in, pred.out, baseline, truth.in, truth.out){
in.R2 <- R2(baseline, pred.in, truth.in)
in.MAE <- mean(abs(pred.in-truth.in))
in.RMSE <- mean(sqrt((pred.in-truth.in)^2))
out.R2 <- R2(baseline, pred.out, truth.out)
out.MAE <- mean(abs(pred.out-truth.out))
out.RMSE <- mean(sqrt((pred.out-truth.out)^2))
return(c(in.R2, in.MAE, in.RMSE, out.R2, out.MAE, out.RMSE))
}
performance.metrics(pred.1.in, pred.1.out, baseline, ames.train$SalePrice, ames.test$SalePrice)
performance.metrics(pred.2.in, pred.2.out, baseline, ames.train$SalePrice, ames.test$SalePrice)
performance.metrics(pred.3.in, pred.3.out, baseline, ames.train$SalePrice, ames.test$SalePrice)
performance.metrics(pred.4.in, pred.4.out, baseline, ames.train$SalePrice, ames.test$SalePrice)
performance.metrics(pred.5.in, pred.5.out, baseline, ames.train$SalePrice, ames.test$SalePrice)
size(ames)
nrow(ames)
knitr::opts_chunk$set(echo = TRUE)
cpVals <- data.frame(.cp = seq(0, .0005, by=.00005))
cpCV = train(SalePrice~.,data=ames.train, method="rpart",
trControl=trainControl(method="cv",number=10),
tuneGrid=cpVals, metric="Rsquared", maximize=TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyr)
library(ggplot2)
library(corrplot)
library(caret)
library(rpart)
library(rpart.plot)
library(randomForest)
library(gbm)
ames = read.csv("ames.csv")
ames$SalePrice = as.numeric(ames$SalePrice)
factor_indices <- unlist(lapply(ames, is.character))
ames[,factor_indices] <- lapply(ames[,factor_indices],as.factor)
nums <- unlist(lapply(ames, is.numeric))
ames[,nums] %>%
cor() %>%
round(2) %>%
corrplot(method="color", tl.cex = 0.5)
ggplot(data = ames)+geom_point(aes(x = GrLivArea, y = SalePrice, color=factor(SaleType)))
ggplot(data = ames)+geom_point(aes(x = GarageArea, y =SalePrice, color=factor(GarageType)))
set.seed(657)
split = createDataPartition(ames$SalePrice, p = 0.65, list = FALSE)
ames.train = ames[split,]
ames.test = ames[-split,]
cpVals <- data.frame(.cp = seq(0, .0005, by=.00005))
cpCV = train(SalePrice~.,data=ames.train, method="rpart",
trControl=trainControl(method="cv",number=10),
tuneGrid=cpVals, metric="Rsquared", maximize=TRUE)
ggplot(cpCV$results, aes(x=factor(cp), y=Rsquared)) +
geom_col() +
theme_bw() +
ylim(0,1) +
xlab("cp parameter") +
ylab("Cross-validated R2") +
theme(axis.title=element_text(size=24), axis.text=element_text(size=20))
best.cp <- cpCV$bestTune
cart1 = rpart(SalePrice~.,
data = ames.train, cp=best.cp)
prp(cart1,digits = 3, varlen = 0, faclen = 0, tweak = 2)
cpVals <- data.frame(.cp = seq(0, .0005, by=.00005))
cpCV = train(SalePrice~.,data=ames.train, method="rpart",
trControl=trainControl(method="cv",number=10),
tuneGrid=cpVals, metric="Rsquared", maximize=TRUE)
ggplot(cpCV$results, aes(x=factor(cp), y=Rsquared)) +
geom_col() +
theme_bw() +
ylim(0,1) +
xlab("cp parameter") +
ylab("Cross-validated R2") +
theme(axis.title=element_text(size=24), axis.text=element_text(size=10))
best.cp <- cpCV$bestTune
cart1 = rpart(SalePrice~.,
data = ames.train, cp=best.cp)
prp(cart1,digits = 3, varlen = 0, faclen = 0, tweak = 2)
ggplot(cpCV$results, aes(x=factor(cp), y=Rsquared)) +
geom_line() +
theme_bw() +
ylim(0,1) +
xlab("cp parameter") +
ylab("Cross-validated R2") +
theme(axis.title=element_text(size=24), axis.text=element_text(size=10))
cpVals <- data.frame(.cp = seq(0, .0005, by=.00005))
cpCV = train(SalePrice~.,data=ames.train, method="rpart",
trControl=trainControl(method="cv",number=10),
tuneGrid=cpVals, metric="Rsquared", maximize=TRUE)
ggplot(cpCV$results, aes(x=factor(cp), y=Rsquared)) +
geom_line() +
theme_bw() +
ylim(0,0001) +
xlab("cp parameter") +
ylab("Cross-validated R2") +
theme(axis.title=element_text(size=24), axis.text=element_text(size=10))
best.cp <- cpCV$bestTune
cart1 = rpart(SalePrice~.,
data = ames.train, cp=best.cp)
prp(cart1,digits = 3, varlen = 0, faclen = 0, tweak = 2)
cpVals <- data.frame(.cp = seq(0, .0005, by=.00005))
cpCV = train(SalePrice~.,data=ames.train, method="rpart",
trControl=trainControl(method="cv",number=10),
tuneGrid=cpVals, metric="Rsquared", maximize=TRUE)
ggplot(cpCV$results, aes(x=factor(cp), y=Rsquared)) +
geom_col() +
theme_bw() +
ylim(0,1) +
xlab("cp parameter") +
ylab("Cross-validated R2") +
theme(axis.title=element_text(size=24), axis.text=element_text(size=10))
best.cp <- cpCV$bestTune
cart1 = rpart(SalePrice~.,
data = ames.train, cp=best.cp)
prp(cart1,digits = 3, varlen = 0, faclen = 0, tweak = 2)
cpVals <- data.frame(.cp = seq(0, .001, by=.0001))
cpCV = train(SalePrice~.,data=ames.train, method="rpart",
trControl=trainControl(method="cv",number=10),
tuneGrid=cpVals, metric="Rsquared", maximize=TRUE)
ggplot(cpCV$results, aes(x=factor(cp), y=Rsquared)) +
geom_col() +
theme_bw() +
ylim(0,1) +
xlab("cp parameter") +
ylab("Cross-validated R2") +
theme(axis.title=element_text(size=24), axis.text=element_text(size=10))
best.cp <- cpCV$bestTune
cart1 = rpart(SalePrice~.,
data = ames.train, cp=best.cp)
prp(cart1,digits = 3, varlen = 0, faclen = 0, tweak = 2)
cpVals <- data.frame(.cp = seq(0, .001, by=.0001))
cpCV = train(SalePrice~.,data=ames.train, method="rpart",
trControl=trainControl(method="cv",number=10),
tuneGrid=cpVals, metric="Rsquared", maximize=TRUE)
ggplot(cpCV$results, aes(x=factor(cp), y=Rsquared)) +
geom_point() +
theme_bw() +
ylim(0,1) +
xlab("cp parameter") +
ylab("Cross-validated R2") +
theme(axis.title=element_text(size=24), axis.text=element_text(size=10))
best.cp <- cpCV$bestTune
cart1 = rpart(SalePrice~.,
data = ames.train, cp=best.cp)
prp(cart1,digits = 3, varlen = 0, faclen = 0, tweak = 2)
cpVals <- data.frame(.cp = seq(0, .01, by=.0005))
cpCV = train(SalePrice~.,data=ames.train, method="rpart",
trControl=trainControl(method="cv",number=10),
tuneGrid=cpVals, metric="Rsquared", maximize=TRUE)
ggplot(cpCV$results, aes(x=factor(cp), y=Rsquared)) +
geom_point() +
theme_bw() +
ylim(0,1) +
xlab("cp parameter") +
ylab("Cross-validated R2") +
theme(axis.title=element_text(size=24), axis.text=element_text(size=10))
best.cp <- cpCV$bestTune
cart1 = rpart(SalePrice~.,
data = ames.train, cp=best.cp)
prp(cart1,digits = 3, varlen = 0, faclen = 0, tweak = 2)
cpVals <- data.frame(.cp = seq(0, .1, by=.005))
cpCV = train(SalePrice~.,data=ames.train, method="rpart",
trControl=trainControl(method="cv",number=10),
tuneGrid=cpVals, metric="Rsquared", maximize=TRUE)
ggplot(cpCV$results, aes(x=factor(cp), y=Rsquared)) +
geom_point() +
theme_bw() +
ylim(0,1) +
xlab("cp parameter") +
ylab("Cross-validated R2") +
theme(axis.title=element_text(size=24), axis.text=element_text(size=10))
best.cp <- cpCV$bestTune
cart1 = rpart(SalePrice~.,
data = ames.train, cp=best.cp)
prp(cart1,digits = 3, varlen = 0, faclen = 0, tweak = 2)
cpVals <- data.frame(.cp = seq(0, .1, by=.005))
cpCV = train(SalePrice~.,data=ames.train, method="rpart",
trControl=trainControl(method="cv",number=10),
tuneGrid=cpVals, metric="Rsquared", maximize=TRUE)
ggplot(cpCV$results, aes(x=factor(cp), y=Rsquared)) +
geom_point() +
theme_bw() +
ylim(0,1) +
xlab("cp parameter") +
ylab("Cross-validated R2") +
theme(axis.title=element_text(size=24), axis.text=element_text(size=5))
best.cp <- cpCV$bestTune
cart1 = rpart(SalePrice~.,
data = ames.train, cp=best.cp)
prp(cart1,digits = 3, varlen = 0, faclen = 0, tweak = 2)
cpVals <- data.frame(.cp = seq(0, .05, by=.001))
cpCV = train(SalePrice~.,data=ames.train, method="rpart",
trControl=trainControl(method="cv",number=10),
tuneGrid=cpVals, metric="Rsquared", maximize=TRUE)
ggplot(cpCV$results, aes(x=factor(cp), y=Rsquared)) +
geom_point() +
theme_bw() +
ylim(0,1) +
xlab("cp parameter") +
ylab("Cross-validated R2") +
theme(axis.title=element_text(size=24), axis.text=element_text(size=5))
best.cp <- cpCV$bestTune
cart1 = rpart(SalePrice~.,
data = ames.train, cp=best.cp)
prp(cart1,digits = 3, varlen = 0, faclen = 0, tweak = 2)
cpVals <- data.frame(.cp = seq(0, .025, by=.0005))
cpCV = train(SalePrice~.,data=ames.train, method="rpart",
trControl=trainControl(method="cv",number=10),
tuneGrid=cpVals, metric="Rsquared", maximize=TRUE)
ggplot(cpCV$results, aes(x=factor(cp), y=Rsquared)) +
geom_point() +
theme_bw() +
ylim(0,1) +
xlab("cp parameter") +
ylab("Cross-validated R2") +
theme(axis.title=element_text(size=24), axis.text=element_text(size=5))
best.cp <- cpCV$bestTune
cart1 = rpart(SalePrice~.,
data = ames.train, cp=best.cp)
prp(cart1,digits = 3, varlen = 0, faclen = 0, tweak = 2)
cpVals <- data.frame(.cp = seq(0, .025, by=.001))
cpCV = train(SalePrice~.,data=ames.train, method="rpart",
trControl=trainControl(method="cv",number=10),
tuneGrid=cpVals, metric="Rsquared", maximize=TRUE)
ggplot(cpCV$results, aes(x=factor(cp), y=Rsquared)) +
geom_point() +
theme_bw() +
ylim(0,1) +
xlab("cp parameter") +
ylab("Cross-validated R2") +
theme(axis.title=element_text(size=24), axis.text=element_text(size=5))
best.cp <- cpCV$bestTune
cart1 = rpart(SalePrice~.,
data = ames.train, cp=best.cp)
prp(cart1,digits = 3, varlen = 0, faclen = 0, tweak = 2)
?fpgrowth
??fpgrowth
install.packages("rCBA")
library(rCBA)
install.packages("rJava")
library(rCBA)
library(rJava)
library(rCBA)
--request
install.packages("JVM")
install.packages("arules")
library(arules)
library(arules)
data(iris)
str(iris)
data("Adult")
str(Adult)
head(Adult)
## find only frequent itemsets which do not contain small or large income
is <- apriori(Adult, parameter = list(support= 0.1, target="frequent"),
appearance = list(none = c("income=small", "income=large")))
dim(Adult)
Adult
itemFrequency(items(is))["income=small"]
itemFrequency(items(is))["income=large"]
## find itemsets that only contain small or large income, or young age
is <- apriori(Adult, parameter = list(support= 0.1, target="frequent"),
appearance = list(items = c("income=small", "income=large", "age=Young")))
inspect(head(is))
## find only rules with income-related variables in the right-hand-side.
incomeItems <- grep("^income=", itemLabels(Adult), value = TRUE)
incomeItems
rules <- apriori(Adult, parameter = list(support=0.2, confidence = 0.5),
appearance = list(rhs = incomeItems))
inspect(head(rules))
apriori(Adult, parameter = list(support= 0.1, target="frequent"))
freq_itemset <- apriori(Adult, parameter = list(support= 0.1, target="frequent"))
inspect(head(freq_itemset))
inspect(freq_itemset)
inspect(freq_itemset)[1]
class(inspect(freq_itemset))
freq_itemset
class(freq_itemset)
fsets <- eclat(Adult, parameter = list(supp = 0.5))
inspect(fsets[1:4])
inspect(itemUnion(items(fsets[1:2]), items(fsets[3:4])))
inspect(itemSetdiff(items(fsets[1:2]), items(fsets[3:4])))
inspect(itemIntersect(items(fsets[1:2]), items(fsets[3:4])))
freq_itemset[1:4]
inspect(freq_itemset[1:4])
freq_itemset.nitems
nitems(freq_itemset)
freq_itemset
?freq_itemset
class(inspect(freq_itemset[1:4]))
df <- inspect(freq_itemset[1:4])
class(df$items)
inspect(freq_itemset[100])
freq_itemset <- apriori(Adult, parameter = list(support= 0.1, target="frequent"),
appearance = list(nitems > 1))
freq_itemset <- apriori(Adult, parameter = list(support= 0.1, target="frequent",minlen=2))
inspect(freq_itemset[1:4])
setwd(/Users/ivanxu/Desktop/MIT/ML under MOL/Final Project/ml-project-mit/Data)
setwd("/Users/ivanxu/Desktop/MIT/ML under MOL/Final Project/ml-project-mit/Data")
dta<-read.csv("Data/default of credit card clients.csv")
dta<-read.csv("default of credit card clients.csv")
str(dta)
